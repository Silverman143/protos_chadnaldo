// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: mining/mining.proto

package miningv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Mining_GetMiningStatus_FullMethodName = "/mining.Mining/GetMiningStatus"
	Mining_StartMining_FullMethodName     = "/mining.Mining/StartMining"
	Mining_CollectCoins_FullMethodName    = "/mining.Mining/CollectCoins"
)

// MiningClient is the client API for Mining service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for managing the mining process
type MiningClient interface {
	// Returns the current mining status
	GetMiningStatus(ctx context.Context, in *GetMiningStatusRequest, opts ...grpc.CallOption) (*GetMiningStatusResponse, error)
	// Starts the mining process
	StartMining(ctx context.Context, in *StartMiningRequest, opts ...grpc.CallOption) (*StartMiningResponse, error)
	// Collects mined coins
	CollectCoins(ctx context.Context, in *CollectCoinsRequest, opts ...grpc.CallOption) (*CollectCoinsResponse, error)
}

type miningClient struct {
	cc grpc.ClientConnInterface
}

func NewMiningClient(cc grpc.ClientConnInterface) MiningClient {
	return &miningClient{cc}
}

func (c *miningClient) GetMiningStatus(ctx context.Context, in *GetMiningStatusRequest, opts ...grpc.CallOption) (*GetMiningStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMiningStatusResponse)
	err := c.cc.Invoke(ctx, Mining_GetMiningStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miningClient) StartMining(ctx context.Context, in *StartMiningRequest, opts ...grpc.CallOption) (*StartMiningResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartMiningResponse)
	err := c.cc.Invoke(ctx, Mining_StartMining_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miningClient) CollectCoins(ctx context.Context, in *CollectCoinsRequest, opts ...grpc.CallOption) (*CollectCoinsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectCoinsResponse)
	err := c.cc.Invoke(ctx, Mining_CollectCoins_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiningServer is the server API for Mining service.
// All implementations must embed UnimplementedMiningServer
// for forward compatibility.
//
// Service for managing the mining process
type MiningServer interface {
	// Returns the current mining status
	GetMiningStatus(context.Context, *GetMiningStatusRequest) (*GetMiningStatusResponse, error)
	// Starts the mining process
	StartMining(context.Context, *StartMiningRequest) (*StartMiningResponse, error)
	// Collects mined coins
	CollectCoins(context.Context, *CollectCoinsRequest) (*CollectCoinsResponse, error)
	mustEmbedUnimplementedMiningServer()
}

// UnimplementedMiningServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMiningServer struct{}

func (UnimplementedMiningServer) GetMiningStatus(context.Context, *GetMiningStatusRequest) (*GetMiningStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMiningStatus not implemented")
}
func (UnimplementedMiningServer) StartMining(context.Context, *StartMiningRequest) (*StartMiningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartMining not implemented")
}
func (UnimplementedMiningServer) CollectCoins(context.Context, *CollectCoinsRequest) (*CollectCoinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectCoins not implemented")
}
func (UnimplementedMiningServer) mustEmbedUnimplementedMiningServer() {}
func (UnimplementedMiningServer) testEmbeddedByValue()                {}

// UnsafeMiningServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiningServer will
// result in compilation errors.
type UnsafeMiningServer interface {
	mustEmbedUnimplementedMiningServer()
}

func RegisterMiningServer(s grpc.ServiceRegistrar, srv MiningServer) {
	// If the following call pancis, it indicates UnimplementedMiningServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Mining_ServiceDesc, srv)
}

func _Mining_GetMiningStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMiningStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiningServer).GetMiningStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mining_GetMiningStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiningServer).GetMiningStatus(ctx, req.(*GetMiningStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mining_StartMining_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartMiningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiningServer).StartMining(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mining_StartMining_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiningServer).StartMining(ctx, req.(*StartMiningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mining_CollectCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectCoinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiningServer).CollectCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mining_CollectCoins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiningServer).CollectCoins(ctx, req.(*CollectCoinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Mining_ServiceDesc is the grpc.ServiceDesc for Mining service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mining_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mining.Mining",
	HandlerType: (*MiningServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMiningStatus",
			Handler:    _Mining_GetMiningStatus_Handler,
		},
		{
			MethodName: "StartMining",
			Handler:    _Mining_StartMining_Handler,
		},
		{
			MethodName: "CollectCoins",
			Handler:    _Mining_CollectCoins_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mining/mining.proto",
}
