// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: referral/referral.proto

package referralv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Referral_MakeUserReferral_FullMethodName  = "/referral.Referral/MakeUserReferral"
	Referral_GetReferralCode_FullMethodName   = "/referral.Referral/GetReferralCode"
	Referral_GetReferralsList_FullMethodName  = "/referral.Referral/GetReferralsList"
	Referral_GetReferralsCount_FullMethodName = "/referral.Referral/GetReferralsCount"
	Referral_GetReferrer_FullMethodName       = "/referral.Referral/GetReferrer"
	Referral_Claim_FullMethodName             = "/referral.Referral/Claim"
)

// ReferralClient is the client API for Referral service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for managing the referral system
type ReferralClient interface {
	// Make a user a referral
	MakeUserReferral(ctx context.Context, in *MakeUserReferralRequest, opts ...grpc.CallOption) (*MakeUserReferralResponse, error)
	// Create a referral link for a user
	GetReferralCode(ctx context.Context, in *GetReferralCodeRequest, opts ...grpc.CallOption) (*GetReferralCodeResponse, error)
	// Get a list of user's referrals with pagination
	GetReferralsList(ctx context.Context, in *GetReferralsListRequest, opts ...grpc.CallOption) (*GetReferralsListResponse, error)
	// Get the count of user's referrals
	GetReferralsCount(ctx context.Context, in *GetReferralsCountRequest, opts ...grpc.CallOption) (*GetReferralsCountResponse, error)
	// Get the referrer of a user
	GetReferrer(ctx context.Context, in *GetReferrerRequest, opts ...grpc.CallOption) (*GetReferrerResponse, error)
	// Clame referral bonuse
	Claim(ctx context.Context, in *ClaimRequest, opts ...grpc.CallOption) (*ClaimResponse, error)
}

type referralClient struct {
	cc grpc.ClientConnInterface
}

func NewReferralClient(cc grpc.ClientConnInterface) ReferralClient {
	return &referralClient{cc}
}

func (c *referralClient) MakeUserReferral(ctx context.Context, in *MakeUserReferralRequest, opts ...grpc.CallOption) (*MakeUserReferralResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MakeUserReferralResponse)
	err := c.cc.Invoke(ctx, Referral_MakeUserReferral_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referralClient) GetReferralCode(ctx context.Context, in *GetReferralCodeRequest, opts ...grpc.CallOption) (*GetReferralCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReferralCodeResponse)
	err := c.cc.Invoke(ctx, Referral_GetReferralCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referralClient) GetReferralsList(ctx context.Context, in *GetReferralsListRequest, opts ...grpc.CallOption) (*GetReferralsListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReferralsListResponse)
	err := c.cc.Invoke(ctx, Referral_GetReferralsList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referralClient) GetReferralsCount(ctx context.Context, in *GetReferralsCountRequest, opts ...grpc.CallOption) (*GetReferralsCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReferralsCountResponse)
	err := c.cc.Invoke(ctx, Referral_GetReferralsCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referralClient) GetReferrer(ctx context.Context, in *GetReferrerRequest, opts ...grpc.CallOption) (*GetReferrerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReferrerResponse)
	err := c.cc.Invoke(ctx, Referral_GetReferrer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referralClient) Claim(ctx context.Context, in *ClaimRequest, opts ...grpc.CallOption) (*ClaimResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClaimResponse)
	err := c.cc.Invoke(ctx, Referral_Claim_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReferralServer is the server API for Referral service.
// All implementations must embed UnimplementedReferralServer
// for forward compatibility.
//
// Service for managing the referral system
type ReferralServer interface {
	// Make a user a referral
	MakeUserReferral(context.Context, *MakeUserReferralRequest) (*MakeUserReferralResponse, error)
	// Create a referral link for a user
	GetReferralCode(context.Context, *GetReferralCodeRequest) (*GetReferralCodeResponse, error)
	// Get a list of user's referrals with pagination
	GetReferralsList(context.Context, *GetReferralsListRequest) (*GetReferralsListResponse, error)
	// Get the count of user's referrals
	GetReferralsCount(context.Context, *GetReferralsCountRequest) (*GetReferralsCountResponse, error)
	// Get the referrer of a user
	GetReferrer(context.Context, *GetReferrerRequest) (*GetReferrerResponse, error)
	// Clame referral bonuse
	Claim(context.Context, *ClaimRequest) (*ClaimResponse, error)
	mustEmbedUnimplementedReferralServer()
}

// UnimplementedReferralServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReferralServer struct{}

func (UnimplementedReferralServer) MakeUserReferral(context.Context, *MakeUserReferralRequest) (*MakeUserReferralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeUserReferral not implemented")
}
func (UnimplementedReferralServer) GetReferralCode(context.Context, *GetReferralCodeRequest) (*GetReferralCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReferralCode not implemented")
}
func (UnimplementedReferralServer) GetReferralsList(context.Context, *GetReferralsListRequest) (*GetReferralsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReferralsList not implemented")
}
func (UnimplementedReferralServer) GetReferralsCount(context.Context, *GetReferralsCountRequest) (*GetReferralsCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReferralsCount not implemented")
}
func (UnimplementedReferralServer) GetReferrer(context.Context, *GetReferrerRequest) (*GetReferrerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReferrer not implemented")
}
func (UnimplementedReferralServer) Claim(context.Context, *ClaimRequest) (*ClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Claim not implemented")
}
func (UnimplementedReferralServer) mustEmbedUnimplementedReferralServer() {}
func (UnimplementedReferralServer) testEmbeddedByValue()                  {}

// UnsafeReferralServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReferralServer will
// result in compilation errors.
type UnsafeReferralServer interface {
	mustEmbedUnimplementedReferralServer()
}

func RegisterReferralServer(s grpc.ServiceRegistrar, srv ReferralServer) {
	// If the following call pancis, it indicates UnimplementedReferralServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Referral_ServiceDesc, srv)
}

func _Referral_MakeUserReferral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeUserReferralRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferralServer).MakeUserReferral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Referral_MakeUserReferral_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferralServer).MakeUserReferral(ctx, req.(*MakeUserReferralRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Referral_GetReferralCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReferralCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferralServer).GetReferralCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Referral_GetReferralCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferralServer).GetReferralCode(ctx, req.(*GetReferralCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Referral_GetReferralsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReferralsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferralServer).GetReferralsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Referral_GetReferralsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferralServer).GetReferralsList(ctx, req.(*GetReferralsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Referral_GetReferralsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReferralsCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferralServer).GetReferralsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Referral_GetReferralsCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferralServer).GetReferralsCount(ctx, req.(*GetReferralsCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Referral_GetReferrer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReferrerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferralServer).GetReferrer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Referral_GetReferrer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferralServer).GetReferrer(ctx, req.(*GetReferrerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Referral_Claim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferralServer).Claim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Referral_Claim_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferralServer).Claim(ctx, req.(*ClaimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Referral_ServiceDesc is the grpc.ServiceDesc for Referral service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Referral_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "referral.Referral",
	HandlerType: (*ReferralServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MakeUserReferral",
			Handler:    _Referral_MakeUserReferral_Handler,
		},
		{
			MethodName: "GetReferralCode",
			Handler:    _Referral_GetReferralCode_Handler,
		},
		{
			MethodName: "GetReferralsList",
			Handler:    _Referral_GetReferralsList_Handler,
		},
		{
			MethodName: "GetReferralsCount",
			Handler:    _Referral_GetReferralsCount_Handler,
		},
		{
			MethodName: "GetReferrer",
			Handler:    _Referral_GetReferrer_Handler,
		},
		{
			MethodName: "Claim",
			Handler:    _Referral_Claim_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "referral/referral.proto",
}
