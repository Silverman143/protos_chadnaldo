// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.0
// source: flappySiuGame/games.proto

package flappySiuGamev1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PreviewType int32

const (
	PreviewType_UNSPECIFIED PreviewType = 0
	PreviewType_X_RAY       PreviewType = 1 // Значение по умолчанию, если не указано
	PreviewType_ULTRA_RAY   PreviewType = 2 // Валюта "gems"
)

// Enum value maps for PreviewType.
var (
	PreviewType_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "X_RAY",
		2: "ULTRA_RAY",
	}
	PreviewType_value = map[string]int32{
		"UNSPECIFIED": 0,
		"X_RAY":       1,
		"ULTRA_RAY":   2,
	}
)

func (x PreviewType) Enum() *PreviewType {
	p := new(PreviewType)
	*p = x
	return p
}

func (x PreviewType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PreviewType) Descriptor() protoreflect.EnumDescriptor {
	return file_flappySiuGame_games_proto_enumTypes[0].Descriptor()
}

func (PreviewType) Type() protoreflect.EnumType {
	return &file_flappySiuGame_games_proto_enumTypes[0]
}

func (x PreviewType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PreviewType.Descriptor instead.
func (PreviewType) EnumDescriptor() ([]byte, []int) {
	return file_flappySiuGame_games_proto_rawDescGZIP(), []int{0}
}

// Common status response containing operation result and error details if any
type OperationStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool    `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`                                    // Whether the operation succeeded
	ErrorMessage *string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3,oneof" json:"error_message,omitempty"` // Error details if operation failed
}

func (x *OperationStatus) Reset() {
	*x = OperationStatus{}
	mi := &file_flappySiuGame_games_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperationStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationStatus) ProtoMessage() {}

func (x *OperationStatus) ProtoReflect() protoreflect.Message {
	mi := &file_flappySiuGame_games_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationStatus.ProtoReflect.Descriptor instead.
func (*OperationStatus) Descriptor() ([]byte, []int) {
	return file_flappySiuGame_games_proto_rawDescGZIP(), []int{0}
}

func (x *OperationStatus) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *OperationStatus) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

// Request to create a new game session for a player
type CreateSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // Unique identifier of the player
}

func (x *CreateSessionRequest) Reset() {
	*x = CreateSessionRequest{}
	mi := &file_flappySiuGame_games_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionRequest) ProtoMessage() {}

func (x *CreateSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flappySiuGame_games_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionRequest.ProtoReflect.Descriptor instead.
func (*CreateSessionRequest) Descriptor() ([]byte, []int) {
	return file_flappySiuGame_games_proto_rawDescGZIP(), []int{1}
}

func (x *CreateSessionRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// Response containing new session details and initial game state
type CreateSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *OperationStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`   // Operation result
	Session *SessionInfo     `protobuf:"bytes,2,opt,name=session,proto3" json:"session,omitempty"` // Session details
}

func (x *CreateSessionResponse) Reset() {
	*x = CreateSessionResponse{}
	mi := &file_flappySiuGame_games_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionResponse) ProtoMessage() {}

func (x *CreateSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flappySiuGame_games_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionResponse.ProtoReflect.Descriptor instead.
func (*CreateSessionResponse) Descriptor() ([]byte, []int) {
	return file_flappySiuGame_games_proto_rawDescGZIP(), []int{2}
}

func (x *CreateSessionResponse) GetStatus() *OperationStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CreateSessionResponse) GetSession() *SessionInfo {
	if x != nil {
		return x.Session
	}
	return nil
}

// Information about a game session
type SessionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameNumber   int32  `protobuf:"varint,1,opt,name=game_number,json=gameNumber,proto3" json:"game_number,omitempty"`      // Sequential number of games played by user
	SessionToken string `protobuf:"bytes,2,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"` // JWT token for session validation
	Timestamp    int64  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                          // UTC timestamp when session was created (milliseconds)
}

func (x *SessionInfo) Reset() {
	*x = SessionInfo{}
	mi := &file_flappySiuGame_games_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionInfo) ProtoMessage() {}

func (x *SessionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_flappySiuGame_games_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionInfo.ProtoReflect.Descriptor instead.
func (*SessionInfo) Descriptor() ([]byte, []int) {
	return file_flappySiuGame_games_proto_rawDescGZIP(), []int{3}
}

func (x *SessionInfo) GetGameNumber() int32 {
	if x != nil {
		return x.GameNumber
	}
	return 0
}

func (x *SessionInfo) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *SessionInfo) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// Statistical data collected during gameplay for validation
type GameStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalJumps             int32   `protobuf:"varint,1,opt,name=total_jumps,json=totalJumps,proto3" json:"total_jumps,omitempty"`                                          // Total number of jump actions performed
	AveragePointsPerSecond float32 `protobuf:"fixed32,2,opt,name=average_points_per_second,json=averagePointsPerSecond,proto3" json:"average_points_per_second,omitempty"` // Average score gain rate
	AverageJumpInterval    float32 `protobuf:"fixed32,3,opt,name=average_jump_interval,json=averageJumpInterval,proto3" json:"average_jump_interval,omitempty"`            // Average time between jumps (milliseconds)
	EventFingerprint       []byte  `protobuf:"bytes,4,opt,name=event_fingerprint,json=eventFingerprint,proto3" json:"event_fingerprint,omitempty"`                         // Hash of critical game events for validation
}

func (x *GameStats) Reset() {
	*x = GameStats{}
	mi := &file_flappySiuGame_games_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameStats) ProtoMessage() {}

func (x *GameStats) ProtoReflect() protoreflect.Message {
	mi := &file_flappySiuGame_games_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameStats.ProtoReflect.Descriptor instead.
func (*GameStats) Descriptor() ([]byte, []int) {
	return file_flappySiuGame_games_proto_rawDescGZIP(), []int{4}
}

func (x *GameStats) GetTotalJumps() int32 {
	if x != nil {
		return x.TotalJumps
	}
	return 0
}

func (x *GameStats) GetAveragePointsPerSecond() float32 {
	if x != nil {
		return x.AveragePointsPerSecond
	}
	return 0
}

func (x *GameStats) GetAverageJumpInterval() float32 {
	if x != nil {
		return x.AverageJumpInterval
	}
	return 0
}

func (x *GameStats) GetEventFingerprint() []byte {
	if x != nil {
		return x.EventFingerprint
	}
	return nil
}

// Request to submit game results for scoring and validation
type SubmitScoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int64      `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                  // Player's unique identifier
	SessionToken string     `protobuf:"bytes,2,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"` // Session token from CreateSessionResponse
	Score        int32      `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`                                  // Final score achieved
	TimeStart    int64      `protobuf:"varint,4,opt,name=time_start,json=timeStart,proto3" json:"time_start,omitempty"`         // Game start timestamp (UTC milliseconds)
	TimeEnd      int64      `protobuf:"varint,5,opt,name=time_end,json=timeEnd,proto3" json:"time_end,omitempty"`               // Game end timestamp (UTC milliseconds)
	GameStats    *GameStats `protobuf:"bytes,6,opt,name=game_stats,json=gameStats,proto3" json:"game_stats,omitempty"`          // Gameplay statistics for validation
	Signature    string     `protobuf:"bytes,7,opt,name=signature,proto3" json:"signature,omitempty"`                           // HMAC signature of game data for security
}

func (x *SubmitScoreRequest) Reset() {
	*x = SubmitScoreRequest{}
	mi := &file_flappySiuGame_games_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitScoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitScoreRequest) ProtoMessage() {}

func (x *SubmitScoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flappySiuGame_games_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitScoreRequest.ProtoReflect.Descriptor instead.
func (*SubmitScoreRequest) Descriptor() ([]byte, []int) {
	return file_flappySiuGame_games_proto_rawDescGZIP(), []int{5}
}

func (x *SubmitScoreRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SubmitScoreRequest) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *SubmitScoreRequest) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *SubmitScoreRequest) GetTimeStart() int64 {
	if x != nil {
		return x.TimeStart
	}
	return 0
}

func (x *SubmitScoreRequest) GetTimeEnd() int64 {
	if x != nil {
		return x.TimeEnd
	}
	return 0
}

func (x *SubmitScoreRequest) GetGameStats() *GameStats {
	if x != nil {
		return x.GameStats
	}
	return nil
}

func (x *SubmitScoreRequest) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

// Response after score submission with rewards and bonus game status
type SubmitScoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       *OperationStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`                                        // Operation result
	TokensEarned *int32           `protobuf:"varint,2,opt,name=tokens_earned,json=tokensEarned,proto3,oneof" json:"tokens_earned,omitempty"` // Tokens awarded for this game
	BonusGame    *BombGameStatus  `protobuf:"bytes,3,opt,name=bonus_game,json=bonusGame,proto3,oneof" json:"bonus_game,omitempty"`           // Bonus game status if unlocked
}

func (x *SubmitScoreResponse) Reset() {
	*x = SubmitScoreResponse{}
	mi := &file_flappySiuGame_games_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitScoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitScoreResponse) ProtoMessage() {}

func (x *SubmitScoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flappySiuGame_games_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitScoreResponse.ProtoReflect.Descriptor instead.
func (*SubmitScoreResponse) Descriptor() ([]byte, []int) {
	return file_flappySiuGame_games_proto_rawDescGZIP(), []int{6}
}

func (x *SubmitScoreResponse) GetStatus() *OperationStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SubmitScoreResponse) GetTokensEarned() int32 {
	if x != nil && x.TokensEarned != nil {
		return *x.TokensEarned
	}
	return 0
}

func (x *SubmitScoreResponse) GetBonusGame() *BombGameStatus {
	if x != nil {
		return x.BonusGame
	}
	return nil
}

type UserGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GamesTotal     int32 `protobuf:"varint,1,opt,name=games_total,json=gamesTotal,proto3" json:"games_total,omitempty"`
	XRayAmount     int32 `protobuf:"varint,2,opt,name=x_ray_amount,json=xRayAmount,proto3" json:"x_ray_amount,omitempty"`
	UltraRayAmount int32 `protobuf:"varint,3,opt,name=ultra_ray_amount,json=ultraRayAmount,proto3" json:"ultra_ray_amount,omitempty"`
	ExtraLifes     int32 `protobuf:"varint,4,opt,name=extra_lifes,json=extraLifes,proto3" json:"extra_lifes,omitempty"`
}

func (x *UserGameData) Reset() {
	*x = UserGameData{}
	mi := &file_flappySiuGame_games_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGameData) ProtoMessage() {}

func (x *UserGameData) ProtoReflect() protoreflect.Message {
	mi := &file_flappySiuGame_games_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGameData.ProtoReflect.Descriptor instead.
func (*UserGameData) Descriptor() ([]byte, []int) {
	return file_flappySiuGame_games_proto_rawDescGZIP(), []int{7}
}

func (x *UserGameData) GetGamesTotal() int32 {
	if x != nil {
		return x.GamesTotal
	}
	return 0
}

func (x *UserGameData) GetXRayAmount() int32 {
	if x != nil {
		return x.XRayAmount
	}
	return 0
}

func (x *UserGameData) GetUltraRayAmount() int32 {
	if x != nil {
		return x.UltraRayAmount
	}
	return 0
}

func (x *UserGameData) GetExtraLifes() int32 {
	if x != nil {
		return x.ExtraLifes
	}
	return 0
}

// Complete status information about the bonus mini-game
type BombGameStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level             int32         `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`                                                    // Current level (0 is first level)
	TotalLevels       int32         `protobuf:"varint,2,opt,name=total_levels,json=totalLevels,proto3" json:"total_levels,omitempty"`                     // Maximum number of levels available
	IsAvailable       bool          `protobuf:"varint,3,opt,name=is_available,json=isAvailable,proto3" json:"is_available,omitempty"`                     // Whether bonus game can be played
	Multiplier        int32         `protobuf:"varint,4,opt,name=multiplier,proto3" json:"multiplier,omitempty"`                                          // Current level multiplier (increases with level)
	TotalTokensEarned int32         `protobuf:"varint,5,opt,name=total_tokens_earned,json=totalTokensEarned,proto3" json:"total_tokens_earned,omitempty"` // Total tokens earned in this bonus session
	IsCompleted       bool          `protobuf:"varint,6,opt,name=is_completed,json=isCompleted,proto3" json:"is_completed,omitempty"`                     // Whether bonus game is completed
	UserGameData      *UserGameData `protobuf:"bytes,7,opt,name=user_game_data,json=userGameData,proto3" json:"user_game_data,omitempty"`
}

func (x *BombGameStatus) Reset() {
	*x = BombGameStatus{}
	mi := &file_flappySiuGame_games_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BombGameStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BombGameStatus) ProtoMessage() {}

func (x *BombGameStatus) ProtoReflect() protoreflect.Message {
	mi := &file_flappySiuGame_games_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BombGameStatus.ProtoReflect.Descriptor instead.
func (*BombGameStatus) Descriptor() ([]byte, []int) {
	return file_flappySiuGame_games_proto_rawDescGZIP(), []int{8}
}

func (x *BombGameStatus) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *BombGameStatus) GetTotalLevels() int32 {
	if x != nil {
		return x.TotalLevels
	}
	return 0
}

func (x *BombGameStatus) GetIsAvailable() bool {
	if x != nil {
		return x.IsAvailable
	}
	return false
}

func (x *BombGameStatus) GetMultiplier() int32 {
	if x != nil {
		return x.Multiplier
	}
	return 0
}

func (x *BombGameStatus) GetTotalTokensEarned() int32 {
	if x != nil {
		return x.TotalTokensEarned
	}
	return 0
}

func (x *BombGameStatus) GetIsCompleted() bool {
	if x != nil {
		return x.IsCompleted
	}
	return false
}

func (x *BombGameStatus) GetUserGameData() *UserGameData {
	if x != nil {
		return x.UserGameData
	}
	return nil
}

// Results of card previews for a specific level
type CardResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cards map[string]string `protobuf:"bytes,1,rep,name=cards,proto3" json:"cards,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Map of card numbers to results ("1":"win")
}

func (x *CardResults) Reset() {
	*x = CardResults{}
	mi := &file_flappySiuGame_games_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CardResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardResults) ProtoMessage() {}

func (x *CardResults) ProtoReflect() protoreflect.Message {
	mi := &file_flappySiuGame_games_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardResults.ProtoReflect.Descriptor instead.
func (*CardResults) Descriptor() ([]byte, []int) {
	return file_flappySiuGame_games_proto_rawDescGZIP(), []int{9}
}

func (x *CardResults) GetCards() map[string]string {
	if x != nil {
		return x.Cards
	}
	return nil
}

// Information about a single card's preview result
type CardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number int32  `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"` // Card number in game grid (1-25)
	Value  string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CardInfo) Reset() {
	*x = CardInfo{}
	mi := &file_flappySiuGame_games_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardInfo) ProtoMessage() {}

func (x *CardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_flappySiuGame_games_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardInfo.ProtoReflect.Descriptor instead.
func (*CardInfo) Descriptor() ([]byte, []int) {
	return file_flappySiuGame_games_proto_rawDescGZIP(), []int{10}
}

func (x *CardInfo) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *CardInfo) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Request to get current bonus game state
type GetBombOrBonusStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                  // Player's unique identifier
	SessionToken string `protobuf:"bytes,2,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"` // Session token for validation
}

func (x *GetBombOrBonusStatusRequest) Reset() {
	*x = GetBombOrBonusStatusRequest{}
	mi := &file_flappySiuGame_games_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBombOrBonusStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBombOrBonusStatusRequest) ProtoMessage() {}

func (x *GetBombOrBonusStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flappySiuGame_games_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBombOrBonusStatusRequest.ProtoReflect.Descriptor instead.
func (*GetBombOrBonusStatusRequest) Descriptor() ([]byte, []int) {
	return file_flappySiuGame_games_proto_rawDescGZIP(), []int{11}
}

func (x *GetBombOrBonusStatusRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetBombOrBonusStatusRequest) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

// Response containing current bonus game status
type GetBombOrBonusStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     *OperationStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`                           // Operation result
	GameStatus *BombGameStatus  `protobuf:"bytes,2,opt,name=game_status,json=gameStatus,proto3" json:"game_status,omitempty"` // Current bonus game state
}

func (x *GetBombOrBonusStatusResponse) Reset() {
	*x = GetBombOrBonusStatusResponse{}
	mi := &file_flappySiuGame_games_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBombOrBonusStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBombOrBonusStatusResponse) ProtoMessage() {}

func (x *GetBombOrBonusStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flappySiuGame_games_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBombOrBonusStatusResponse.ProtoReflect.Descriptor instead.
func (*GetBombOrBonusStatusResponse) Descriptor() ([]byte, []int) {
	return file_flappySiuGame_games_proto_rawDescGZIP(), []int{12}
}

func (x *GetBombOrBonusStatusResponse) GetStatus() *OperationStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetBombOrBonusStatusResponse) GetGameStatus() *BombGameStatus {
	if x != nil {
		return x.GameStatus
	}
	return nil
}

// Request to reveal a card in bonus game
type BombOrBonusRevealCardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                  // Player's unique identifier
	SessionToken string `protobuf:"bytes,2,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"` // Session token for validation
	CardNumber   int32  `protobuf:"varint,3,opt,name=card_number,json=cardNumber,proto3" json:"card_number,omitempty"`      // Number of card to reveal (1-25)
}

func (x *BombOrBonusRevealCardRequest) Reset() {
	*x = BombOrBonusRevealCardRequest{}
	mi := &file_flappySiuGame_games_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BombOrBonusRevealCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BombOrBonusRevealCardRequest) ProtoMessage() {}

func (x *BombOrBonusRevealCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flappySiuGame_games_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BombOrBonusRevealCardRequest.ProtoReflect.Descriptor instead.
func (*BombOrBonusRevealCardRequest) Descriptor() ([]byte, []int) {
	return file_flappySiuGame_games_proto_rawDescGZIP(), []int{13}
}

func (x *BombOrBonusRevealCardRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *BombOrBonusRevealCardRequest) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *BombOrBonusRevealCardRequest) GetCardNumber() int32 {
	if x != nil {
		return x.CardNumber
	}
	return 0
}

// Response with result of card reveal attempt
type BombOrBonusRevealCardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       *OperationStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`                                        // Operation result
	IsBomb       bool             `protobuf:"varint,2,opt,name=is_bomb,json=isBomb,proto3" json:"is_bomb,omitempty"`                         // Whether revealed card was a bomb
	TokensEarned *int32           `protobuf:"varint,3,opt,name=tokens_earned,json=tokensEarned,proto3,oneof" json:"tokens_earned,omitempty"` // Tokens earned if card was bonus
	GameStatus   *BombGameStatus  `protobuf:"bytes,4,opt,name=game_status,json=gameStatus,proto3,oneof" json:"game_status,omitempty"`        // Updated game status
}

func (x *BombOrBonusRevealCardResponse) Reset() {
	*x = BombOrBonusRevealCardResponse{}
	mi := &file_flappySiuGame_games_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BombOrBonusRevealCardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BombOrBonusRevealCardResponse) ProtoMessage() {}

func (x *BombOrBonusRevealCardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flappySiuGame_games_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BombOrBonusRevealCardResponse.ProtoReflect.Descriptor instead.
func (*BombOrBonusRevealCardResponse) Descriptor() ([]byte, []int) {
	return file_flappySiuGame_games_proto_rawDescGZIP(), []int{14}
}

func (x *BombOrBonusRevealCardResponse) GetStatus() *OperationStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BombOrBonusRevealCardResponse) GetIsBomb() bool {
	if x != nil {
		return x.IsBomb
	}
	return false
}

func (x *BombOrBonusRevealCardResponse) GetTokensEarned() int32 {
	if x != nil && x.TokensEarned != nil {
		return *x.TokensEarned
	}
	return 0
}

func (x *BombOrBonusRevealCardResponse) GetGameStatus() *BombGameStatus {
	if x != nil {
		return x.GameStatus
	}
	return nil
}

// Request to preview multiple cards in bonus game
type BombOrBonusPreviewCardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int64       `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                               // Player's unique identifier
	SessionToken string      `protobuf:"bytes,2,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`                              // Session token for validation
	PreviewType  PreviewType `protobuf:"varint,3,opt,name=preview_type,json=previewType,proto3,enum=flappySiuGame.PreviewType" json:"preview_type,omitempty"` // Card numbers to preview ([1,3,5])
}

func (x *BombOrBonusPreviewCardsRequest) Reset() {
	*x = BombOrBonusPreviewCardsRequest{}
	mi := &file_flappySiuGame_games_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BombOrBonusPreviewCardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BombOrBonusPreviewCardsRequest) ProtoMessage() {}

func (x *BombOrBonusPreviewCardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flappySiuGame_games_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BombOrBonusPreviewCardsRequest.ProtoReflect.Descriptor instead.
func (*BombOrBonusPreviewCardsRequest) Descriptor() ([]byte, []int) {
	return file_flappySiuGame_games_proto_rawDescGZIP(), []int{15}
}

func (x *BombOrBonusPreviewCardsRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *BombOrBonusPreviewCardsRequest) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *BombOrBonusPreviewCardsRequest) GetPreviewType() PreviewType {
	if x != nil {
		return x.PreviewType
	}
	return PreviewType_UNSPECIFIED
}

// Response containing preview results for requested cards
type BombOrBonusPreviewCardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *OperationStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"` // Operation result
	Cards  []*CardInfo      `protobuf:"bytes,2,rep,name=cards,proto3" json:"cards,omitempty"`   // Preview results for each card
}

func (x *BombOrBonusPreviewCardsResponse) Reset() {
	*x = BombOrBonusPreviewCardsResponse{}
	mi := &file_flappySiuGame_games_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BombOrBonusPreviewCardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BombOrBonusPreviewCardsResponse) ProtoMessage() {}

func (x *BombOrBonusPreviewCardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flappySiuGame_games_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BombOrBonusPreviewCardsResponse.ProtoReflect.Descriptor instead.
func (*BombOrBonusPreviewCardsResponse) Descriptor() ([]byte, []int) {
	return file_flappySiuGame_games_proto_rawDescGZIP(), []int{16}
}

func (x *BombOrBonusPreviewCardsResponse) GetStatus() *OperationStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BombOrBonusPreviewCardsResponse) GetCards() []*CardInfo {
	if x != nil {
		return x.Cards
	}
	return nil
}

type BombOrBonusExtraLifeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SessionToken string `protobuf:"bytes,2,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
}

func (x *BombOrBonusExtraLifeRequest) Reset() {
	*x = BombOrBonusExtraLifeRequest{}
	mi := &file_flappySiuGame_games_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BombOrBonusExtraLifeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BombOrBonusExtraLifeRequest) ProtoMessage() {}

func (x *BombOrBonusExtraLifeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flappySiuGame_games_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BombOrBonusExtraLifeRequest.ProtoReflect.Descriptor instead.
func (*BombOrBonusExtraLifeRequest) Descriptor() ([]byte, []int) {
	return file_flappySiuGame_games_proto_rawDescGZIP(), []int{17}
}

func (x *BombOrBonusExtraLifeRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *BombOrBonusExtraLifeRequest) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

type BombOrBonusExtraLifeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status           *OperationStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ExtraLifeGranted bool             `protobuf:"varint,2,opt,name=extra_life_granted,json=extraLifeGranted,proto3" json:"extra_life_granted,omitempty"`
	ErrorDetails     string           `protobuf:"bytes,3,opt,name=error_details,json=errorDetails,proto3" json:"error_details,omitempty"`
}

func (x *BombOrBonusExtraLifeResponse) Reset() {
	*x = BombOrBonusExtraLifeResponse{}
	mi := &file_flappySiuGame_games_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BombOrBonusExtraLifeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BombOrBonusExtraLifeResponse) ProtoMessage() {}

func (x *BombOrBonusExtraLifeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flappySiuGame_games_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BombOrBonusExtraLifeResponse.ProtoReflect.Descriptor instead.
func (*BombOrBonusExtraLifeResponse) Descriptor() ([]byte, []int) {
	return file_flappySiuGame_games_proto_rawDescGZIP(), []int{18}
}

func (x *BombOrBonusExtraLifeResponse) GetStatus() *OperationStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BombOrBonusExtraLifeResponse) GetExtraLifeGranted() bool {
	if x != nil {
		return x.ExtraLifeGranted
	}
	return false
}

func (x *BombOrBonusExtraLifeResponse) GetErrorDetails() string {
	if x != nil {
		return x.ErrorDetails
	}
	return ""
}

var File_flappySiuGame_games_proto protoreflect.FileDescriptor

var file_flappySiuGame_games_proto_rawDesc = []byte{
	0x0a, 0x19, 0x66, 0x6c, 0x61, 0x70, 0x70, 0x79, 0x53, 0x69, 0x75, 0x47, 0x61, 0x6d, 0x65, 0x2f,
	0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x66, 0x6c, 0x61,
	0x70, 0x70, 0x79, 0x53, 0x69, 0x75, 0x47, 0x61, 0x6d, 0x65, 0x22, 0x67, 0x0a, 0x0f, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x2f, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x66, 0x6c, 0x61, 0x70, 0x70, 0x79, 0x53, 0x69, 0x75, 0x47, 0x61, 0x6d, 0x65, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x61, 0x70, 0x70, 0x79,
	0x53, 0x69, 0x75, 0x47, 0x61, 0x6d, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x71, 0x0a, 0x0b,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0xc8, 0x01, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6a, 0x75, 0x6d, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4a, 0x75, 0x6d, 0x70, 0x73, 0x12, 0x39,
	0x0a, 0x19, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x16, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2b, 0x0a,
	0x11, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x46,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x22, 0xf9, 0x01, 0x0a, 0x12, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12,
	0x37, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x61, 0x70, 0x70, 0x79, 0x53, 0x69, 0x75, 0x47,
	0x61, 0x6d, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x09, 0x67,
	0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xdb, 0x01, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x66, 0x6c, 0x61, 0x70, 0x70, 0x79, 0x53, 0x69, 0x75, 0x47, 0x61, 0x6d, 0x65, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x5f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x41, 0x0a, 0x0a, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6c, 0x61, 0x70, 0x70, 0x79, 0x53, 0x69, 0x75,
	0x47, 0x61, 0x6d, 0x65, 0x2e, 0x42, 0x6f, 0x6d, 0x62, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x48, 0x01, 0x52, 0x09, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x47, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x65,
	0x61, 0x72, 0x6e, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x47, 0x61, 0x6d,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x61, 0x6d, 0x65,
	0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x78, 0x5f, 0x72, 0x61, 0x79, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x78, 0x52,
	0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x6c, 0x74, 0x72,
	0x61, 0x5f, 0x72, 0x61, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x75, 0x6c, 0x74, 0x72, 0x61, 0x52, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x6c, 0x69, 0x66, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x4c, 0x69,
	0x66, 0x65, 0x73, 0x22, 0xa2, 0x02, 0x0a, 0x0e, 0x42, 0x6f, 0x6d, 0x62, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x45, 0x61, 0x72, 0x6e,
	0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x66, 0x6c, 0x61, 0x70, 0x70, 0x79, 0x53, 0x69, 0x75, 0x47, 0x61, 0x6d, 0x65, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72,
	0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x84, 0x01, 0x0a, 0x0b, 0x43, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x66, 0x6c, 0x61, 0x70, 0x70, 0x79,
	0x53, 0x69, 0x75, 0x47, 0x61, 0x6d, 0x65, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x63, 0x61, 0x72, 0x64, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x43, 0x61, 0x72, 0x64, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x38, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5b, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x42, 0x6f, 0x6d, 0x62, 0x4f, 0x72, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x96, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x42, 0x6f,
	0x6d, 0x62, 0x4f, 0x72, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x61, 0x70, 0x70, 0x79,
	0x53, 0x69, 0x75, 0x47, 0x61, 0x6d, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x3e, 0x0a, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6c, 0x61, 0x70, 0x70, 0x79, 0x53, 0x69, 0x75,
	0x47, 0x61, 0x6d, 0x65, 0x2e, 0x42, 0x6f, 0x6d, 0x62, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x7d, 0x0a, 0x1c, 0x42, 0x6f, 0x6d, 0x62, 0x4f, 0x72, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x65,
	0x76, 0x65, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x81,
	0x02, 0x0a, 0x1d, 0x42, 0x6f, 0x6d, 0x62, 0x4f, 0x72, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x65,
	0x76, 0x65, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x36, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x61, 0x70, 0x70, 0x79, 0x53, 0x69, 0x75, 0x47, 0x61, 0x6d, 0x65,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x62,
	0x6f, 0x6d, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x42, 0x6f, 0x6d,
	0x62, 0x12, 0x28, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x65, 0x61, 0x72, 0x6e,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0b, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x66, 0x6c, 0x61, 0x70, 0x70, 0x79, 0x53, 0x69, 0x75, 0x47, 0x61, 0x6d, 0x65,
	0x2e, 0x42, 0x6f, 0x6d, 0x62, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48,
	0x01, 0x52, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x65, 0x61, 0x72, 0x6e,
	0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x1e, 0x42, 0x6f, 0x6d, 0x62, 0x4f, 0x72, 0x42, 0x6f, 0x6e,
	0x75, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x61, 0x70,
	0x70, 0x79, 0x53, 0x69, 0x75, 0x47, 0x61, 0x6d, 0x65, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x1f, 0x42, 0x6f, 0x6d, 0x62, 0x4f, 0x72, 0x42, 0x6f, 0x6e,
	0x75, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x61, 0x70, 0x70, 0x79, 0x53,
	0x69, 0x75, 0x47, 0x61, 0x6d, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d,
	0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x66, 0x6c, 0x61, 0x70, 0x70, 0x79, 0x53, 0x69, 0x75, 0x47, 0x61, 0x6d, 0x65, 0x2e, 0x43, 0x61,
	0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x22, 0x5b, 0x0a,
	0x1b, 0x42, 0x6f, 0x6d, 0x62, 0x4f, 0x72, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x4c, 0x69, 0x66, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xa9, 0x01, 0x0a, 0x1c, 0x42,
	0x6f, 0x6d, 0x62, 0x4f, 0x72, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4c,
	0x69, 0x66, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6c,
	0x61, 0x70, 0x70, 0x79, 0x53, 0x69, 0x75, 0x47, 0x61, 0x6d, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x6c, 0x69, 0x66,
	0x65, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x65, 0x78, 0x74, 0x72, 0x61, 0x4c, 0x69, 0x66, 0x65, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2a, 0x38, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x58, 0x5f, 0x52, 0x41, 0x59, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4c, 0x54, 0x52, 0x41, 0x5f, 0x52, 0x41, 0x59, 0x10, 0x02,
	0x32, 0x91, 0x05, 0x0a, 0x0d, 0x46, 0x6c, 0x61, 0x70, 0x70, 0x79, 0x53, 0x69, 0x75, 0x47, 0x61,
	0x6d, 0x65, 0x12, 0x5a, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x66, 0x6c, 0x61, 0x70, 0x70, 0x79, 0x53, 0x69, 0x75, 0x47,
	0x61, 0x6d, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x66, 0x6c, 0x61, 0x70, 0x70,
	0x79, 0x53, 0x69, 0x75, 0x47, 0x61, 0x6d, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54,
	0x0a, 0x0b, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x2e,
	0x66, 0x6c, 0x61, 0x70, 0x70, 0x79, 0x53, 0x69, 0x75, 0x47, 0x61, 0x6d, 0x65, 0x2e, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x66, 0x6c, 0x61, 0x70, 0x70, 0x79, 0x53, 0x69, 0x75, 0x47, 0x61, 0x6d, 0x65,
	0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6d, 0x62, 0x4f,
	0x72, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x2e, 0x66,
	0x6c, 0x61, 0x70, 0x70, 0x79, 0x53, 0x69, 0x75, 0x47, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x6f, 0x6d, 0x62, 0x4f, 0x72, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x66, 0x6c, 0x61, 0x70, 0x70,
	0x79, 0x53, 0x69, 0x75, 0x47, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6d, 0x62,
	0x4f, 0x72, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a, 0x15, 0x42, 0x6f, 0x6d, 0x62, 0x4f, 0x72, 0x42,
	0x6f, 0x6e, 0x75, 0x73, 0x52, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x12, 0x2b,
	0x2e, 0x66, 0x6c, 0x61, 0x70, 0x70, 0x79, 0x53, 0x69, 0x75, 0x47, 0x61, 0x6d, 0x65, 0x2e, 0x42,
	0x6f, 0x6d, 0x62, 0x4f, 0x72, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x65, 0x76, 0x65, 0x61, 0x6c,
	0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x66, 0x6c,
	0x61, 0x70, 0x70, 0x79, 0x53, 0x69, 0x75, 0x47, 0x61, 0x6d, 0x65, 0x2e, 0x42, 0x6f, 0x6d, 0x62,
	0x4f, 0x72, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x43, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x17, 0x42, 0x6f, 0x6d,
	0x62, 0x4f, 0x72, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x12, 0x2d, 0x2e, 0x66, 0x6c, 0x61, 0x70, 0x70, 0x79, 0x53, 0x69, 0x75,
	0x47, 0x61, 0x6d, 0x65, 0x2e, 0x42, 0x6f, 0x6d, 0x62, 0x4f, 0x72, 0x42, 0x6f, 0x6e, 0x75, 0x73,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x66, 0x6c, 0x61, 0x70, 0x70, 0x79, 0x53, 0x69, 0x75, 0x47,
	0x61, 0x6d, 0x65, 0x2e, 0x42, 0x6f, 0x6d, 0x62, 0x4f, 0x72, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x14, 0x42, 0x6f, 0x6d, 0x62, 0x4f, 0x72, 0x42, 0x6f, 0x6e,
	0x75, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4c, 0x69, 0x66, 0x65, 0x12, 0x2a, 0x2e, 0x66, 0x6c,
	0x61, 0x70, 0x70, 0x79, 0x53, 0x69, 0x75, 0x47, 0x61, 0x6d, 0x65, 0x2e, 0x42, 0x6f, 0x6d, 0x62,
	0x4f, 0x72, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4c, 0x69, 0x66, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x66, 0x6c, 0x61, 0x70, 0x70, 0x79,
	0x53, 0x69, 0x75, 0x47, 0x61, 0x6d, 0x65, 0x2e, 0x42, 0x6f, 0x6d, 0x62, 0x4f, 0x72, 0x42, 0x6f,
	0x6e, 0x75, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4c, 0x69, 0x66, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x27, 0x5a, 0x25, 0x62, 0x6f, 0x62, 0x61, 0x2e, 0x66, 0x6c, 0x61,
	0x70, 0x70, 0x79, 0x53, 0x69, 0x75, 0x47, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x3b, 0x66, 0x6c,
	0x61, 0x70, 0x70, 0x79, 0x53, 0x69, 0x75, 0x47, 0x61, 0x6d, 0x65, 0x76, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_flappySiuGame_games_proto_rawDescOnce sync.Once
	file_flappySiuGame_games_proto_rawDescData = file_flappySiuGame_games_proto_rawDesc
)

func file_flappySiuGame_games_proto_rawDescGZIP() []byte {
	file_flappySiuGame_games_proto_rawDescOnce.Do(func() {
		file_flappySiuGame_games_proto_rawDescData = protoimpl.X.CompressGZIP(file_flappySiuGame_games_proto_rawDescData)
	})
	return file_flappySiuGame_games_proto_rawDescData
}

var file_flappySiuGame_games_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_flappySiuGame_games_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_flappySiuGame_games_proto_goTypes = []any{
	(PreviewType)(0),                        // 0: flappySiuGame.PreviewType
	(*OperationStatus)(nil),                 // 1: flappySiuGame.OperationStatus
	(*CreateSessionRequest)(nil),            // 2: flappySiuGame.CreateSessionRequest
	(*CreateSessionResponse)(nil),           // 3: flappySiuGame.CreateSessionResponse
	(*SessionInfo)(nil),                     // 4: flappySiuGame.SessionInfo
	(*GameStats)(nil),                       // 5: flappySiuGame.GameStats
	(*SubmitScoreRequest)(nil),              // 6: flappySiuGame.SubmitScoreRequest
	(*SubmitScoreResponse)(nil),             // 7: flappySiuGame.SubmitScoreResponse
	(*UserGameData)(nil),                    // 8: flappySiuGame.UserGameData
	(*BombGameStatus)(nil),                  // 9: flappySiuGame.BombGameStatus
	(*CardResults)(nil),                     // 10: flappySiuGame.CardResults
	(*CardInfo)(nil),                        // 11: flappySiuGame.CardInfo
	(*GetBombOrBonusStatusRequest)(nil),     // 12: flappySiuGame.GetBombOrBonusStatusRequest
	(*GetBombOrBonusStatusResponse)(nil),    // 13: flappySiuGame.GetBombOrBonusStatusResponse
	(*BombOrBonusRevealCardRequest)(nil),    // 14: flappySiuGame.BombOrBonusRevealCardRequest
	(*BombOrBonusRevealCardResponse)(nil),   // 15: flappySiuGame.BombOrBonusRevealCardResponse
	(*BombOrBonusPreviewCardsRequest)(nil),  // 16: flappySiuGame.BombOrBonusPreviewCardsRequest
	(*BombOrBonusPreviewCardsResponse)(nil), // 17: flappySiuGame.BombOrBonusPreviewCardsResponse
	(*BombOrBonusExtraLifeRequest)(nil),     // 18: flappySiuGame.BombOrBonusExtraLifeRequest
	(*BombOrBonusExtraLifeResponse)(nil),    // 19: flappySiuGame.BombOrBonusExtraLifeResponse
	nil,                                     // 20: flappySiuGame.CardResults.CardsEntry
}
var file_flappySiuGame_games_proto_depIdxs = []int32{
	1,  // 0: flappySiuGame.CreateSessionResponse.status:type_name -> flappySiuGame.OperationStatus
	4,  // 1: flappySiuGame.CreateSessionResponse.session:type_name -> flappySiuGame.SessionInfo
	5,  // 2: flappySiuGame.SubmitScoreRequest.game_stats:type_name -> flappySiuGame.GameStats
	1,  // 3: flappySiuGame.SubmitScoreResponse.status:type_name -> flappySiuGame.OperationStatus
	9,  // 4: flappySiuGame.SubmitScoreResponse.bonus_game:type_name -> flappySiuGame.BombGameStatus
	8,  // 5: flappySiuGame.BombGameStatus.user_game_data:type_name -> flappySiuGame.UserGameData
	20, // 6: flappySiuGame.CardResults.cards:type_name -> flappySiuGame.CardResults.CardsEntry
	1,  // 7: flappySiuGame.GetBombOrBonusStatusResponse.status:type_name -> flappySiuGame.OperationStatus
	9,  // 8: flappySiuGame.GetBombOrBonusStatusResponse.game_status:type_name -> flappySiuGame.BombGameStatus
	1,  // 9: flappySiuGame.BombOrBonusRevealCardResponse.status:type_name -> flappySiuGame.OperationStatus
	9,  // 10: flappySiuGame.BombOrBonusRevealCardResponse.game_status:type_name -> flappySiuGame.BombGameStatus
	0,  // 11: flappySiuGame.BombOrBonusPreviewCardsRequest.preview_type:type_name -> flappySiuGame.PreviewType
	1,  // 12: flappySiuGame.BombOrBonusPreviewCardsResponse.status:type_name -> flappySiuGame.OperationStatus
	11, // 13: flappySiuGame.BombOrBonusPreviewCardsResponse.cards:type_name -> flappySiuGame.CardInfo
	1,  // 14: flappySiuGame.BombOrBonusExtraLifeResponse.status:type_name -> flappySiuGame.OperationStatus
	2,  // 15: flappySiuGame.FlappySiuGame.CreateSession:input_type -> flappySiuGame.CreateSessionRequest
	6,  // 16: flappySiuGame.FlappySiuGame.SubmitScore:input_type -> flappySiuGame.SubmitScoreRequest
	12, // 17: flappySiuGame.FlappySiuGame.GetBombOrBonusStatus:input_type -> flappySiuGame.GetBombOrBonusStatusRequest
	14, // 18: flappySiuGame.FlappySiuGame.BombOrBonusRevealCard:input_type -> flappySiuGame.BombOrBonusRevealCardRequest
	16, // 19: flappySiuGame.FlappySiuGame.BombOrBonusPreviewCards:input_type -> flappySiuGame.BombOrBonusPreviewCardsRequest
	18, // 20: flappySiuGame.FlappySiuGame.BombOrBonusExtraLife:input_type -> flappySiuGame.BombOrBonusExtraLifeRequest
	3,  // 21: flappySiuGame.FlappySiuGame.CreateSession:output_type -> flappySiuGame.CreateSessionResponse
	7,  // 22: flappySiuGame.FlappySiuGame.SubmitScore:output_type -> flappySiuGame.SubmitScoreResponse
	13, // 23: flappySiuGame.FlappySiuGame.GetBombOrBonusStatus:output_type -> flappySiuGame.GetBombOrBonusStatusResponse
	15, // 24: flappySiuGame.FlappySiuGame.BombOrBonusRevealCard:output_type -> flappySiuGame.BombOrBonusRevealCardResponse
	17, // 25: flappySiuGame.FlappySiuGame.BombOrBonusPreviewCards:output_type -> flappySiuGame.BombOrBonusPreviewCardsResponse
	19, // 26: flappySiuGame.FlappySiuGame.BombOrBonusExtraLife:output_type -> flappySiuGame.BombOrBonusExtraLifeResponse
	21, // [21:27] is the sub-list for method output_type
	15, // [15:21] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_flappySiuGame_games_proto_init() }
func file_flappySiuGame_games_proto_init() {
	if File_flappySiuGame_games_proto != nil {
		return
	}
	file_flappySiuGame_games_proto_msgTypes[0].OneofWrappers = []any{}
	file_flappySiuGame_games_proto_msgTypes[6].OneofWrappers = []any{}
	file_flappySiuGame_games_proto_msgTypes[14].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flappySiuGame_games_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_flappySiuGame_games_proto_goTypes,
		DependencyIndexes: file_flappySiuGame_games_proto_depIdxs,
		EnumInfos:         file_flappySiuGame_games_proto_enumTypes,
		MessageInfos:      file_flappySiuGame_games_proto_msgTypes,
	}.Build()
	File_flappySiuGame_games_proto = out.File
	file_flappySiuGame_games_proto_rawDesc = nil
	file_flappySiuGame_games_proto_goTypes = nil
	file_flappySiuGame_games_proto_depIdxs = nil
}
