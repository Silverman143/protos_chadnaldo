// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.0
// source: flappySiuGame/games.proto

package flappySiuGamev1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Base response structure for common fields
type BaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool            `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`                               // Operation success status
	ErrorMessage string          `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`  // Error details if success is false
	TokensEarned int32           `protobuf:"varint,3,opt,name=tokens_earned,json=tokensEarned,proto3" json:"tokens_earned,omitempty"` // Tokens earned from operation
	BombGame     *BombGameStatus `protobuf:"bytes,4,opt,name=bomb_game,json=bombGame,proto3" json:"bomb_game,omitempty"`              // Current bonus game status
}

func (x *BaseResponse) Reset() {
	*x = BaseResponse{}
	mi := &file_flappySiuGame_games_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseResponse) ProtoMessage() {}

func (x *BaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flappySiuGame_games_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseResponse.ProtoReflect.Descriptor instead.
func (*BaseResponse) Descriptor() ([]byte, []int) {
	return file_flappySiuGame_games_proto_rawDescGZIP(), []int{0}
}

func (x *BaseResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BaseResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *BaseResponse) GetTokensEarned() int32 {
	if x != nil {
		return x.TokensEarned
	}
	return 0
}

func (x *BaseResponse) GetBombGame() *BombGameStatus {
	if x != nil {
		return x.BombGame
	}
	return nil
}

// Request to create a new game session
type CreateSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // Unique identifier of the player
}

func (x *CreateSessionRequest) Reset() {
	*x = CreateSessionRequest{}
	mi := &file_flappySiuGame_games_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionRequest) ProtoMessage() {}

func (x *CreateSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flappySiuGame_games_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionRequest.ProtoReflect.Descriptor instead.
func (*CreateSessionRequest) Descriptor() ([]byte, []int) {
	return file_flappySiuGame_games_proto_rawDescGZIP(), []int{1}
}

func (x *CreateSessionRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// Response containing session details and initial game state
type CreateSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameNumber   int32           `protobuf:"varint,1,opt,name=game_number,json=gameNumber,proto3" json:"game_number,omitempty"`      // Sequential number of games played by the user
	SessionToken string          `protobuf:"bytes,2,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"` // JWT token for session validation
	Timestamp    int64           `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                          // UTC timestamp when session was created (in milliseconds)
	BombGame     *BombGameStatus `protobuf:"bytes,4,opt,name=bomb_game,json=bombGame,proto3" json:"bomb_game,omitempty"`             // Initial bonus game status if available
}

func (x *CreateSessionResponse) Reset() {
	*x = CreateSessionResponse{}
	mi := &file_flappySiuGame_games_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionResponse) ProtoMessage() {}

func (x *CreateSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flappySiuGame_games_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionResponse.ProtoReflect.Descriptor instead.
func (*CreateSessionResponse) Descriptor() ([]byte, []int) {
	return file_flappySiuGame_games_proto_rawDescGZIP(), []int{2}
}

func (x *CreateSessionResponse) GetGameNumber() int32 {
	if x != nil {
		return x.GameNumber
	}
	return 0
}

func (x *CreateSessionResponse) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *CreateSessionResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *CreateSessionResponse) GetBombGame() *BombGameStatus {
	if x != nil {
		return x.BombGame
	}
	return nil
}

// Statistical data collected during gameplay for validation
type GameStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalJumps             int32   `protobuf:"varint,1,opt,name=total_jumps,json=totalJumps,proto3" json:"total_jumps,omitempty"`                                          // Total number of jump actions performed
	AveragePointsPerSecond float32 `protobuf:"fixed32,2,opt,name=average_points_per_second,json=averagePointsPerSecond,proto3" json:"average_points_per_second,omitempty"` // Average score gain rate
	AverageJumpInterval    float32 `protobuf:"fixed32,3,opt,name=average_jump_interval,json=averageJumpInterval,proto3" json:"average_jump_interval,omitempty"`            // Average time between jumps in milliseconds
	EventFingerprint       []byte  `protobuf:"bytes,4,opt,name=event_fingerprint,json=eventFingerprint,proto3" json:"event_fingerprint,omitempty"`                         // Hash of critical game events for validation
}

func (x *GameStats) Reset() {
	*x = GameStats{}
	mi := &file_flappySiuGame_games_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameStats) ProtoMessage() {}

func (x *GameStats) ProtoReflect() protoreflect.Message {
	mi := &file_flappySiuGame_games_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameStats.ProtoReflect.Descriptor instead.
func (*GameStats) Descriptor() ([]byte, []int) {
	return file_flappySiuGame_games_proto_rawDescGZIP(), []int{3}
}

func (x *GameStats) GetTotalJumps() int32 {
	if x != nil {
		return x.TotalJumps
	}
	return 0
}

func (x *GameStats) GetAveragePointsPerSecond() float32 {
	if x != nil {
		return x.AveragePointsPerSecond
	}
	return 0
}

func (x *GameStats) GetAverageJumpInterval() float32 {
	if x != nil {
		return x.AverageJumpInterval
	}
	return 0
}

func (x *GameStats) GetEventFingerprint() []byte {
	if x != nil {
		return x.EventFingerprint
	}
	return nil
}

// Request to submit game results
type SubmitScoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int64      `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                  // Player's unique identifier
	SessionToken string     `protobuf:"bytes,2,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"` // Session token from CreateSessionResponse
	GameNumber   int32      `protobuf:"varint,3,opt,name=game_number,json=gameNumber,proto3" json:"game_number,omitempty"`      // Should match game_number from CreateSessionResponse
	Score        int32      `protobuf:"varint,4,opt,name=score,proto3" json:"score,omitempty"`                                  // Final score achieved
	TimeStart    int64      `protobuf:"varint,5,opt,name=time_start,json=timeStart,proto3" json:"time_start,omitempty"`         // Game start timestamp (UTC in milliseconds)
	TimeEnd      int64      `protobuf:"varint,6,opt,name=time_end,json=timeEnd,proto3" json:"time_end,omitempty"`               // Game end timestamp (UTC in milliseconds)
	GameStats    *GameStats `protobuf:"bytes,7,opt,name=game_stats,json=gameStats,proto3" json:"game_stats,omitempty"`          // Gameplay statistics for validation
	Signature    string     `protobuf:"bytes,8,opt,name=signature,proto3" json:"signature,omitempty"`                           // HMAC signature of game data for security
}

func (x *SubmitScoreRequest) Reset() {
	*x = SubmitScoreRequest{}
	mi := &file_flappySiuGame_games_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitScoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitScoreRequest) ProtoMessage() {}

func (x *SubmitScoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flappySiuGame_games_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitScoreRequest.ProtoReflect.Descriptor instead.
func (*SubmitScoreRequest) Descriptor() ([]byte, []int) {
	return file_flappySiuGame_games_proto_rawDescGZIP(), []int{4}
}

func (x *SubmitScoreRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SubmitScoreRequest) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *SubmitScoreRequest) GetGameNumber() int32 {
	if x != nil {
		return x.GameNumber
	}
	return 0
}

func (x *SubmitScoreRequest) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *SubmitScoreRequest) GetTimeStart() int64 {
	if x != nil {
		return x.TimeStart
	}
	return 0
}

func (x *SubmitScoreRequest) GetTimeEnd() int64 {
	if x != nil {
		return x.TimeEnd
	}
	return 0
}

func (x *SubmitScoreRequest) GetGameStats() *GameStats {
	if x != nil {
		return x.GameStats
	}
	return nil
}

func (x *SubmitScoreRequest) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

// Response after score submission
type SubmitScoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *BaseResponse `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"` // Common response fields
}

func (x *SubmitScoreResponse) Reset() {
	*x = SubmitScoreResponse{}
	mi := &file_flappySiuGame_games_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitScoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitScoreResponse) ProtoMessage() {}

func (x *SubmitScoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flappySiuGame_games_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitScoreResponse.ProtoReflect.Descriptor instead.
func (*SubmitScoreResponse) Descriptor() ([]byte, []int) {
	return file_flappySiuGame_games_proto_rawDescGZIP(), []int{5}
}

func (x *SubmitScoreResponse) GetBase() *BaseResponse {
	if x != nil {
		return x.Base
	}
	return nil
}

// Status information about the bonus mini-game
type BombGameStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level             int32 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`                                                    // Current level in the bonus game (0 is first level)
	TotalLevels       int32 `protobuf:"varint,2,opt,name=total_levels,json=totalLevels,proto3" json:"total_levels,omitempty"`                     // Maximum number of levels available
	PriceToOpen       int32 `protobuf:"varint,3,opt,name=price_to_open,json=priceToOpen,proto3" json:"price_to_open,omitempty"`                   // Token cost to open next card
	IsAvailable       bool  `protobuf:"varint,4,opt,name=is_available,json=isAvailable,proto3" json:"is_available,omitempty"`                     // Whether the bonus game can be played
	Multiplier        int32 `protobuf:"varint,5,opt,name=multiplier,proto3" json:"multiplier,omitempty"`                                          // Current level multiplier (increases with each level)
	TotalTokensEarned int32 `protobuf:"varint,6,opt,name=total_tokens_earned,json=totalTokensEarned,proto3" json:"total_tokens_earned,omitempty"` // Total tokens earned in this bonus game session
}

func (x *BombGameStatus) Reset() {
	*x = BombGameStatus{}
	mi := &file_flappySiuGame_games_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BombGameStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BombGameStatus) ProtoMessage() {}

func (x *BombGameStatus) ProtoReflect() protoreflect.Message {
	mi := &file_flappySiuGame_games_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BombGameStatus.ProtoReflect.Descriptor instead.
func (*BombGameStatus) Descriptor() ([]byte, []int) {
	return file_flappySiuGame_games_proto_rawDescGZIP(), []int{6}
}

func (x *BombGameStatus) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *BombGameStatus) GetTotalLevels() int32 {
	if x != nil {
		return x.TotalLevels
	}
	return 0
}

func (x *BombGameStatus) GetPriceToOpen() int32 {
	if x != nil {
		return x.PriceToOpen
	}
	return 0
}

func (x *BombGameStatus) GetIsAvailable() bool {
	if x != nil {
		return x.IsAvailable
	}
	return false
}

func (x *BombGameStatus) GetMultiplier() int32 {
	if x != nil {
		return x.Multiplier
	}
	return 0
}

func (x *BombGameStatus) GetTotalTokensEarned() int32 {
	if x != nil {
		return x.TotalTokensEarned
	}
	return 0
}

// Request to get current bonus game state
type GetBombOrBonusStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                  // Player's unique identifier
	SessionToken string `protobuf:"bytes,2,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"` // Session token for validation
}

func (x *GetBombOrBonusStatusRequest) Reset() {
	*x = GetBombOrBonusStatusRequest{}
	mi := &file_flappySiuGame_games_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBombOrBonusStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBombOrBonusStatusRequest) ProtoMessage() {}

func (x *GetBombOrBonusStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flappySiuGame_games_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBombOrBonusStatusRequest.ProtoReflect.Descriptor instead.
func (*GetBombOrBonusStatusRequest) Descriptor() ([]byte, []int) {
	return file_flappySiuGame_games_proto_rawDescGZIP(), []int{7}
}

func (x *GetBombOrBonusStatusRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetBombOrBonusStatusRequest) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

// Current state of the bonus game
type GetBombOrBonusStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base    *BaseResponse `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"` // Common response fields
	Message string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetBombOrBonusStatusResponse) Reset() {
	*x = GetBombOrBonusStatusResponse{}
	mi := &file_flappySiuGame_games_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBombOrBonusStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBombOrBonusStatusResponse) ProtoMessage() {}

func (x *GetBombOrBonusStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flappySiuGame_games_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBombOrBonusStatusResponse.ProtoReflect.Descriptor instead.
func (*GetBombOrBonusStatusResponse) Descriptor() ([]byte, []int) {
	return file_flappySiuGame_games_proto_rawDescGZIP(), []int{8}
}

func (x *GetBombOrBonusStatusResponse) GetBase() *BaseResponse {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *GetBombOrBonusStatusResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Request to try bonus game
type BombOrBonusRevealCardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                  // Player's unique identifier
	SessionToken string `protobuf:"bytes,2,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"` // Session token for validation
	CardNumber   int32  `protobuf:"varint,3,opt,name=card_number,json=cardNumber,proto3" json:"card_number,omitempty"`
}

func (x *BombOrBonusRevealCardRequest) Reset() {
	*x = BombOrBonusRevealCardRequest{}
	mi := &file_flappySiuGame_games_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BombOrBonusRevealCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BombOrBonusRevealCardRequest) ProtoMessage() {}

func (x *BombOrBonusRevealCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flappySiuGame_games_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BombOrBonusRevealCardRequest.ProtoReflect.Descriptor instead.
func (*BombOrBonusRevealCardRequest) Descriptor() ([]byte, []int) {
	return file_flappySiuGame_games_proto_rawDescGZIP(), []int{9}
}

func (x *BombOrBonusRevealCardRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *BombOrBonusRevealCardRequest) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *BombOrBonusRevealCardRequest) GetCardNumber() int32 {
	if x != nil {
		return x.CardNumber
	}
	return 0
}

// Result of bonus game attempt
type BombOrBonusRevealCardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base   *BaseResponse `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`                    // Common response fields
	IsBomb bool          `protobuf:"varint,2,opt,name=is_bomb,json=isBomb,proto3" json:"is_bomb,omitempty"` // Whether player hit a bomb
}

func (x *BombOrBonusRevealCardResponse) Reset() {
	*x = BombOrBonusRevealCardResponse{}
	mi := &file_flappySiuGame_games_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BombOrBonusRevealCardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BombOrBonusRevealCardResponse) ProtoMessage() {}

func (x *BombOrBonusRevealCardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flappySiuGame_games_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BombOrBonusRevealCardResponse.ProtoReflect.Descriptor instead.
func (*BombOrBonusRevealCardResponse) Descriptor() ([]byte, []int) {
	return file_flappySiuGame_games_proto_rawDescGZIP(), []int{10}
}

func (x *BombOrBonusRevealCardResponse) GetBase() *BaseResponse {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *BombOrBonusRevealCardResponse) GetIsBomb() bool {
	if x != nil {
		return x.IsBomb
	}
	return false
}

// Request to preview multiple cards in the Bomb/Bonus game
type BombOrBonusPreviewCardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int64   `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                       // Player's unique identifier
	SessionToken string  `protobuf:"bytes,2,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`      // Current game session token
	CardNumbers  []int32 `protobuf:"varint,3,rep,packed,name=card_numbers,json=cardNumbers,proto3" json:"card_numbers,omitempty"` // List of card numbers to preview (e.g., [1, 3, 5])
}

func (x *BombOrBonusPreviewCardsRequest) Reset() {
	*x = BombOrBonusPreviewCardsRequest{}
	mi := &file_flappySiuGame_games_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BombOrBonusPreviewCardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BombOrBonusPreviewCardsRequest) ProtoMessage() {}

func (x *BombOrBonusPreviewCardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flappySiuGame_games_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BombOrBonusPreviewCardsRequest.ProtoReflect.Descriptor instead.
func (*BombOrBonusPreviewCardsRequest) Descriptor() ([]byte, []int) {
	return file_flappySiuGame_games_proto_rawDescGZIP(), []int{11}
}

func (x *BombOrBonusPreviewCardsRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *BombOrBonusPreviewCardsRequest) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *BombOrBonusPreviewCardsRequest) GetCardNumbers() []int32 {
	if x != nil {
		return x.CardNumbers
	}
	return nil
}

// Information about a single card in the game
type CardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number int32 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"` // Card's number in the game grid (e.g., 1-25)
	Win    bool  `protobuf:"varint,2,opt,name=win,proto3" json:"win,omitempty"`       // True if this is a bonus card, false if it's a bomb
}

func (x *CardInfo) Reset() {
	*x = CardInfo{}
	mi := &file_flappySiuGame_games_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardInfo) ProtoMessage() {}

func (x *CardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_flappySiuGame_games_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardInfo.ProtoReflect.Descriptor instead.
func (*CardInfo) Descriptor() ([]byte, []int) {
	return file_flappySiuGame_games_proto_rawDescGZIP(), []int{12}
}

func (x *CardInfo) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *CardInfo) GetWin() bool {
	if x != nil {
		return x.Win
	}
	return false
}

// Response containing preview information for multiple cards
type BombOrBonusPreviewCardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base  *BaseResponse `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`   // Common response fields like status, error messages etc.
	Cards []*CardInfo   `protobuf:"bytes,2,rep,name=cards,proto3" json:"cards,omitempty"` // List of previewed cards with their win/lose status
}

func (x *BombOrBonusPreviewCardsResponse) Reset() {
	*x = BombOrBonusPreviewCardsResponse{}
	mi := &file_flappySiuGame_games_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BombOrBonusPreviewCardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BombOrBonusPreviewCardsResponse) ProtoMessage() {}

func (x *BombOrBonusPreviewCardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flappySiuGame_games_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BombOrBonusPreviewCardsResponse.ProtoReflect.Descriptor instead.
func (*BombOrBonusPreviewCardsResponse) Descriptor() ([]byte, []int) {
	return file_flappySiuGame_games_proto_rawDescGZIP(), []int{13}
}

func (x *BombOrBonusPreviewCardsResponse) GetBase() *BaseResponse {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *BombOrBonusPreviewCardsResponse) GetCards() []*CardInfo {
	if x != nil {
		return x.Cards
	}
	return nil
}

var File_flappySiuGame_games_proto protoreflect.FileDescriptor

var file_flappySiuGame_games_proto_rawDesc = []byte{
	0x0a, 0x19, 0x66, 0x6c, 0x61, 0x70, 0x70, 0x79, 0x53, 0x69, 0x75, 0x47, 0x61, 0x6d, 0x65, 0x2f,
	0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x66, 0x6c, 0x61,
	0x70, 0x70, 0x79, 0x53, 0x69, 0x75, 0x47, 0x61, 0x6d, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x0c, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x12,
	0x3a, 0x0a, 0x09, 0x62, 0x6f, 0x6d, 0x62, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6c, 0x61, 0x70, 0x70, 0x79, 0x53, 0x69, 0x75, 0x47, 0x61,
	0x6d, 0x65, 0x2e, 0x42, 0x6f, 0x6d, 0x62, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x08, 0x62, 0x6f, 0x6d, 0x62, 0x47, 0x61, 0x6d, 0x65, 0x22, 0x2f, 0x0a, 0x14, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb7, 0x01, 0x0a,
	0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x61, 0x6d,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3a, 0x0a, 0x09, 0x62, 0x6f,
	0x6d, 0x62, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x66, 0x6c, 0x61, 0x70, 0x70, 0x79, 0x53, 0x69, 0x75, 0x47, 0x61, 0x6d, 0x65, 0x2e, 0x42, 0x6f,
	0x6d, 0x62, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x62, 0x6f,
	0x6d, 0x62, 0x47, 0x61, 0x6d, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6a, 0x75,
	0x6d, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x4a, 0x75, 0x6d, 0x70, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x12, 0x32, 0x0a, 0x15, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6a, 0x75, 0x6d, 0x70,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x13, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69,
	0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x22, 0x9a, 0x02, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x61, 0x6d,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c,
	0x61, 0x70, 0x70, 0x79, 0x53, 0x69, 0x75, 0x47, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x46,
	0x0a, 0x13, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x6c, 0x61, 0x70, 0x70, 0x79, 0x53, 0x69, 0x75, 0x47,
	0x61, 0x6d, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x22, 0xe0, 0x01, 0x0a, 0x0e, 0x42, 0x6f, 0x6d, 0x62, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6f,
	0x70, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x54, 0x6f, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x22, 0x5b, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x42, 0x6f, 0x6d, 0x62, 0x4f, 0x72, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x69, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6d,
	0x62, 0x4f, 0x72, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x6c, 0x61, 0x70, 0x70, 0x79, 0x53, 0x69, 0x75,
	0x47, 0x61, 0x6d, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x7d, 0x0a, 0x1c, 0x42, 0x6f, 0x6d, 0x62, 0x4f, 0x72, 0x42, 0x6f, 0x6e, 0x75, 0x73,
	0x52, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0x69, 0x0a, 0x1d, 0x42, 0x6f, 0x6d, 0x62, 0x4f, 0x72, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x52,
	0x65, 0x76, 0x65, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2f, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x66, 0x6c, 0x61, 0x70, 0x70, 0x79, 0x53, 0x69, 0x75, 0x47, 0x61, 0x6d, 0x65, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61,
	0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x6d, 0x62, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x42, 0x6f, 0x6d, 0x62, 0x22, 0x81, 0x01, 0x0a, 0x1e,
	0x42, 0x6f, 0x6d, 0x62, 0x4f, 0x72, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22,
	0x34, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x03, 0x77, 0x69, 0x6e, 0x22, 0x81, 0x01, 0x0a, 0x1f, 0x42, 0x6f, 0x6d, 0x62, 0x4f, 0x72,
	0x42, 0x6f, 0x6e, 0x75, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x6c, 0x61, 0x70, 0x70, 0x79,
	0x53, 0x69, 0x75, 0x47, 0x61, 0x6d, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x63, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6c, 0x61, 0x70,
	0x70, 0x79, 0x53, 0x69, 0x75, 0x47, 0x61, 0x6d, 0x65, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x32, 0xa0, 0x04, 0x0a, 0x0d, 0x46, 0x6c,
	0x61, 0x70, 0x70, 0x79, 0x53, 0x69, 0x75, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x5a, 0x0a, 0x0d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x66,
	0x6c, 0x61, 0x70, 0x70, 0x79, 0x53, 0x69, 0x75, 0x47, 0x61, 0x6d, 0x65, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x66, 0x6c, 0x61, 0x70, 0x70, 0x79, 0x53, 0x69, 0x75, 0x47, 0x61, 0x6d,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x2e, 0x66, 0x6c, 0x61, 0x70, 0x70, 0x79, 0x53,
	0x69, 0x75, 0x47, 0x61, 0x6d, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x66, 0x6c, 0x61, 0x70,
	0x70, 0x79, 0x53, 0x69, 0x75, 0x47, 0x61, 0x6d, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6d, 0x62, 0x4f, 0x72, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x2e, 0x66, 0x6c, 0x61, 0x70, 0x70, 0x79, 0x53, 0x69,
	0x75, 0x47, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6d, 0x62, 0x4f, 0x72, 0x42,
	0x6f, 0x6e, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x66, 0x6c, 0x61, 0x70, 0x70, 0x79, 0x53, 0x69, 0x75, 0x47, 0x61, 0x6d,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6d, 0x62, 0x4f, 0x72, 0x42, 0x6f, 0x6e, 0x75, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72,
	0x0a, 0x15, 0x42, 0x6f, 0x6d, 0x62, 0x4f, 0x72, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x65, 0x76,
	0x65, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x12, 0x2b, 0x2e, 0x66, 0x6c, 0x61, 0x70, 0x70, 0x79,
	0x53, 0x69, 0x75, 0x47, 0x61, 0x6d, 0x65, 0x2e, 0x42, 0x6f, 0x6d, 0x62, 0x4f, 0x72, 0x42, 0x6f,
	0x6e, 0x75, 0x73, 0x52, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x66, 0x6c, 0x61, 0x70, 0x70, 0x79, 0x53, 0x69, 0x75,
	0x47, 0x61, 0x6d, 0x65, 0x2e, 0x42, 0x6f, 0x6d, 0x62, 0x4f, 0x72, 0x42, 0x6f, 0x6e, 0x75, 0x73,
	0x52, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x78, 0x0a, 0x17, 0x42, 0x6f, 0x6d, 0x62, 0x4f, 0x72, 0x42, 0x6f, 0x6e, 0x75,
	0x73, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x2d, 0x2e,
	0x66, 0x6c, 0x61, 0x70, 0x70, 0x79, 0x53, 0x69, 0x75, 0x47, 0x61, 0x6d, 0x65, 0x2e, 0x42, 0x6f,
	0x6d, 0x62, 0x4f, 0x72, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x66,
	0x6c, 0x61, 0x70, 0x70, 0x79, 0x53, 0x69, 0x75, 0x47, 0x61, 0x6d, 0x65, 0x2e, 0x42, 0x6f, 0x6d,
	0x62, 0x4f, 0x72, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x27, 0x5a, 0x25,
	0x62, 0x6f, 0x62, 0x61, 0x2e, 0x66, 0x6c, 0x61, 0x70, 0x70, 0x79, 0x53, 0x69, 0x75, 0x47, 0x61,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x3b, 0x66, 0x6c, 0x61, 0x70, 0x70, 0x79, 0x53, 0x69, 0x75, 0x47,
	0x61, 0x6d, 0x65, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_flappySiuGame_games_proto_rawDescOnce sync.Once
	file_flappySiuGame_games_proto_rawDescData = file_flappySiuGame_games_proto_rawDesc
)

func file_flappySiuGame_games_proto_rawDescGZIP() []byte {
	file_flappySiuGame_games_proto_rawDescOnce.Do(func() {
		file_flappySiuGame_games_proto_rawDescData = protoimpl.X.CompressGZIP(file_flappySiuGame_games_proto_rawDescData)
	})
	return file_flappySiuGame_games_proto_rawDescData
}

var file_flappySiuGame_games_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_flappySiuGame_games_proto_goTypes = []any{
	(*BaseResponse)(nil),                    // 0: flappySiuGame.BaseResponse
	(*CreateSessionRequest)(nil),            // 1: flappySiuGame.CreateSessionRequest
	(*CreateSessionResponse)(nil),           // 2: flappySiuGame.CreateSessionResponse
	(*GameStats)(nil),                       // 3: flappySiuGame.GameStats
	(*SubmitScoreRequest)(nil),              // 4: flappySiuGame.SubmitScoreRequest
	(*SubmitScoreResponse)(nil),             // 5: flappySiuGame.SubmitScoreResponse
	(*BombGameStatus)(nil),                  // 6: flappySiuGame.BombGameStatus
	(*GetBombOrBonusStatusRequest)(nil),     // 7: flappySiuGame.GetBombOrBonusStatusRequest
	(*GetBombOrBonusStatusResponse)(nil),    // 8: flappySiuGame.GetBombOrBonusStatusResponse
	(*BombOrBonusRevealCardRequest)(nil),    // 9: flappySiuGame.BombOrBonusRevealCardRequest
	(*BombOrBonusRevealCardResponse)(nil),   // 10: flappySiuGame.BombOrBonusRevealCardResponse
	(*BombOrBonusPreviewCardsRequest)(nil),  // 11: flappySiuGame.BombOrBonusPreviewCardsRequest
	(*CardInfo)(nil),                        // 12: flappySiuGame.CardInfo
	(*BombOrBonusPreviewCardsResponse)(nil), // 13: flappySiuGame.BombOrBonusPreviewCardsResponse
}
var file_flappySiuGame_games_proto_depIdxs = []int32{
	6,  // 0: flappySiuGame.BaseResponse.bomb_game:type_name -> flappySiuGame.BombGameStatus
	6,  // 1: flappySiuGame.CreateSessionResponse.bomb_game:type_name -> flappySiuGame.BombGameStatus
	3,  // 2: flappySiuGame.SubmitScoreRequest.game_stats:type_name -> flappySiuGame.GameStats
	0,  // 3: flappySiuGame.SubmitScoreResponse.base:type_name -> flappySiuGame.BaseResponse
	0,  // 4: flappySiuGame.GetBombOrBonusStatusResponse.base:type_name -> flappySiuGame.BaseResponse
	0,  // 5: flappySiuGame.BombOrBonusRevealCardResponse.base:type_name -> flappySiuGame.BaseResponse
	0,  // 6: flappySiuGame.BombOrBonusPreviewCardsResponse.base:type_name -> flappySiuGame.BaseResponse
	12, // 7: flappySiuGame.BombOrBonusPreviewCardsResponse.cards:type_name -> flappySiuGame.CardInfo
	1,  // 8: flappySiuGame.FlappySiuGame.CreateSession:input_type -> flappySiuGame.CreateSessionRequest
	4,  // 9: flappySiuGame.FlappySiuGame.SubmitScore:input_type -> flappySiuGame.SubmitScoreRequest
	7,  // 10: flappySiuGame.FlappySiuGame.GetBombOrBonusStatus:input_type -> flappySiuGame.GetBombOrBonusStatusRequest
	9,  // 11: flappySiuGame.FlappySiuGame.BombOrBonusRevealCard:input_type -> flappySiuGame.BombOrBonusRevealCardRequest
	11, // 12: flappySiuGame.FlappySiuGame.BombOrBonusPreviewCards:input_type -> flappySiuGame.BombOrBonusPreviewCardsRequest
	2,  // 13: flappySiuGame.FlappySiuGame.CreateSession:output_type -> flappySiuGame.CreateSessionResponse
	5,  // 14: flappySiuGame.FlappySiuGame.SubmitScore:output_type -> flappySiuGame.SubmitScoreResponse
	8,  // 15: flappySiuGame.FlappySiuGame.GetBombOrBonusStatus:output_type -> flappySiuGame.GetBombOrBonusStatusResponse
	10, // 16: flappySiuGame.FlappySiuGame.BombOrBonusRevealCard:output_type -> flappySiuGame.BombOrBonusRevealCardResponse
	13, // 17: flappySiuGame.FlappySiuGame.BombOrBonusPreviewCards:output_type -> flappySiuGame.BombOrBonusPreviewCardsResponse
	13, // [13:18] is the sub-list for method output_type
	8,  // [8:13] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_flappySiuGame_games_proto_init() }
func file_flappySiuGame_games_proto_init() {
	if File_flappySiuGame_games_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flappySiuGame_games_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_flappySiuGame_games_proto_goTypes,
		DependencyIndexes: file_flappySiuGame_games_proto_depIdxs,
		MessageInfos:      file_flappySiuGame_games_proto_msgTypes,
	}.Build()
	File_flappySiuGame_games_proto = out.File
	file_flappySiuGame_games_proto_rawDesc = nil
	file_flappySiuGame_games_proto_goTypes = nil
	file_flappySiuGame_games_proto_depIdxs = nil
}
