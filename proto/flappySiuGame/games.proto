syntax = "proto3";

package flappySiuGame;

option go_package = "boba.flappySiuGame.v1;flappySiuGamev1";


// FlappySiuGame service provides endpoints for main game and bonus mini-game
service FlappySiuGame {
    // Creates new game session and returns session credentials
    rpc CreateSession(CreateSessionRequest) returns (CreateSessionResponse);
    
    // Validates and processes game results, may unlock bonus game
    rpc SubmitScore(SubmitScoreRequest) returns (SubmitScoreResponse);
    
    // Gets current state of bonus mini-game
    rpc GetBombOrBonusStatus(GetBombOrBonusStatusRequest) returns (GetBombOrBonusStatusResponse);
    
    // Handles revealing a card in bonus mini-game
    rpc BombOrBonusRevealCard(BombOrBonusRevealCardRequest) returns (BombOrBonusRevealCardResponse);
    
    // Provides preview information for multiple cards in bonus game
    rpc BombOrBonusPreviewCards(BombOrBonusPreviewCardsRequest) returns (BombOrBonusPreviewCardsResponse);

    // Activate extra life if exists
    rpc BombOrBonusExtraLife(BombOrBonusExtraLifeRequest) returns (BombOrBonusExtraLifeResponse);

    // Return gems store items
    rpc GetGemsStoreItems(EmptyRequest) returns (GetGemsStoreItemsResponse);

    // Buy gems store items
    rpc BuyGemsStoreItems(BuyGemsStoreItemsRequest) returns (BuyGemsStoreItemsResponse);

    // Returns paid store items
    rpc GetPaidStoreItems(EmptyRequest) returns (GetPaidStoreItemsResponse);

    // Returns payment invoice link
    rpc GetPaidStoreInvoiceLink(GetPaidStoreInvoiceLinkRequest) returns (GetPaidStoreInvoiceLinkResponse);
 }
 
message EmptyRequest{

}

//-----------------------------------------------------------------------------
// Common Messages
//-----------------------------------------------------------------------------

// Common status response containing operation result and error details if any
message OperationStatus {
    bool success = 1;                    // Whether the operation succeeded
    optional string error_message = 2;    // Error details if operation failed
 }
 
 //-----------------------------------------------------------------------------
 // Game Session Messages 
 //-----------------------------------------------------------------------------
 
 // Request to create a new game session for a player
 message CreateSessionRequest {
    int64 user_id = 1;                   // Unique identifier of the player
 }
 
 // Response containing new session details and initial game state
 message CreateSessionResponse {
    OperationStatus status = 1;          // Operation result
    SessionInfo session = 2;             // Session details
 }
 
 // Information about a game session
 message SessionInfo {
    int32 game_number = 1;               // Sequential number of games played by user
    string session_token = 2;            // JWT token for session validation
    int64 timestamp = 3;                 // UTC timestamp when session was created (milliseconds)
 }
 
 //-----------------------------------------------------------------------------
 // Main Game Messages
 //-----------------------------------------------------------------------------
 
 // Statistical data collected during gameplay for validation
 message GameStats {
    int32 total_jumps = 1;               // Total number of jump actions performed
    float average_points_per_second = 2;  // Average score gain rate
    float average_jump_interval = 3;      // Average time between jumps (milliseconds)
    bytes event_fingerprint = 4;          // Hash of critical game events for validation
 }
 
 // Request to submit game results for scoring and validation
 message SubmitScoreRequest {
    int64 user_id = 1;                   // Player's unique identifier
    string session_token = 2;            // Session token from CreateSessionResponse
    int32 score = 3;                     // Final score achieved
    int64 time_start = 4;                // Game start timestamp (UTC milliseconds)
    int64 time_end = 5;                  // Game end timestamp (UTC milliseconds)
    GameStats game_stats = 6;            // Gameplay statistics for validation
    string signature = 7;                // HMAC signature of game data for security
 }
 
 // Response after score submission with rewards and bonus game status
 message SubmitScoreResponse {
    OperationStatus status = 1;          // Operation result
    optional int32 tokens_earned = 2;     // Tokens awarded for this game
    optional BombGameStatus bonus_game = 3; // Bonus game status if unlocked
 }
 
 //-----------------------------------------------------------------------------
 // Bonus Game Messages 
 //-----------------------------------------------------------------------------
 
message UserGameData{
   int32 games_total = 1;
   int32 x_ray_amount = 2;
   int32 ultra_ray_amount =3;
   int32 extra_lifes =4;
}

 // Complete status information about the bonus mini-game
 message BombGameStatus {
    int32 level = 1;                     // Current level (0 is first level)
    int32 total_levels = 2;              // Maximum number of levels available
    bool is_available = 3;               // Whether bonus game can be played
    int32 multiplier = 4;                // Current level multiplier (increases with level)
    int32 total_tokens_earned = 5;       // Total tokens earned in this bonus session
    bool is_completed = 6;               // Whether bonus game is completed
    UserGameData user_game_data = 7;
 }
 
 // Results of card previews for a specific level
 message CardResults {
    map<string, string> cards = 1;       // Map of card numbers to results ("1":"win")
 }
 
 // Information about a single card's preview result
 message CardInfo {
    int32 number = 1;                    // Card number in game grid (1-25)
    string value = 2;                      
 }
 
 // Request to get current bonus game state
 message GetBombOrBonusStatusRequest {
    int64 user_id = 1;                   // Player's unique identifier
    string session_token = 2;            // Session token for validation
 }
 
 // Response containing current bonus game status
 message GetBombOrBonusStatusResponse {
    OperationStatus status = 1;          // Operation result
    BombGameStatus game_status = 2;      // Current bonus game state
 }
 
// Request to reveal a card in bonus game
message BombOrBonusRevealCardRequest {
    int64 user_id = 1;                   // Player's unique identifier
    string session_token = 2;            // Session token for validation
    int32 card_number = 3;               // Number of card to reveal (1-25)
 }
 
// Response with result of card reveal attempt
message BombOrBonusRevealCardResponse {
    OperationStatus status = 1;          // Operation result
    bool is_bomb = 2;                    // Whether revealed card was a bomb
    optional int32 tokens_earned = 3;     // Tokens earned if card was bonus
    optional BombGameStatus game_status = 4; // Updated game status
 }
 
enum PreviewType {
   UNSPECIFIED = 0;
   X_RAY = 1; // Значение по умолчанию, если не указано
   ULTRA_RAY = 2;               // Валюта "gems"
}
 // Request to preview multiple cards in bonus game
message BombOrBonusPreviewCardsRequest {
   int64 user_id = 1;                   // Player's unique identifier
   string session_token = 2;            // Session token for validation
   PreviewType preview_type = 3;      // Card numbers to preview ([1,3,5])
 }
 
// Response containing preview results for requested cards
message BombOrBonusPreviewCardsResponse {
    OperationStatus status = 1;          // Operation result  
    repeated CardInfo cards = 2;         // Preview results for each card
 }

message BombOrBonusExtraLifeRequest {
   int64 user_id = 1;  
   string session_token = 2; 
}

message BombOrBonusExtraLifeResponse {
   OperationStatus status = 1;
   bool extra_life_granted = 2;  
   string error_details = 3;  
}

// Gems store 

enum GemsStoreItemName {
   STORE_ITEM_UNSPECIFIED = 0;
   STORE_ITEM_X_RAY = 1;
   STORE_ITEM_ULTRA_RAY = 2;
   STORE_ITEM_EXTRA_LIFE = 3;
}

message GemsStoreItem {
   int64 id = 1;
   GemsStoreItemName item = 2;
   int64 price = 3;
}

message GetGemsStoreItemsResponse{
   OperationStatus status = 1;
   repeated GemsStoreItem items = 2;
}

message BuyGemsStoreItemsRequest {
   int64 user_id = 1;
   int64 item_id = 2;
   int64 amount = 3;
}

message BuyGemsStoreItemsResponse {
   OperationStatus status = 1;
   int64 total_amount = 2;
}

// Paid store

message PaidStoreItem{
   int64 item_id = 1;
   string item_type = 2;
   float price_usd = 3;
   string item_name = 4;
   int64 items_amount = 5;
}

message GetPaidStoreItemsResponse {
   OperationStatus status = 1;
   repeated PaidStoreItem items = 2;
}

message GetPaidStoreInvoiceLinkRequest {
   int64 user_id = 1;
   int64 item_id = 2;
   int64 payment_method_id = 3;
}

message PaymentInvoice{
   string payment_id = 1;
   string payment_type = 2;
   string payment_url = 3;
}

message GetPaidStoreInvoiceLinkResponse {
   OperationStatus status = 1;
   PaymentInvoice invoice = 2;
}